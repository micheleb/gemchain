{"version":3,"sources":["components/Game/Game.tsx","effects.ts","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["rows","Array","from","_","i","cols","cellId","row","col","concat","cellsProps","_i","_rows","length","r","_i4","_cols3","c","NeighbourDirection","Cell","React","memo","props","_classnames","react_default","a","createElement","className","classnames","Object","defineProperty","color","undefined","blinking","neighbourKey","_neighbourKey","E","NE","N","NW","forwardRef","ref","initialScenario","forEach","p","_useState","useState","_useState2","slicedToArray","cells","setCells","_useState3","_useState4","speedGravityUp","setSpeedGravityUp","useImperativeHandle","addGem","newGem","objectSpread","resetMoving","values","moving","gravityStep","ROW_COUNT","_i2","_cols","cell","cellBelow","checkConnected","othersInPath","allPaths","dir","updatedPath","toConsumableArray","d","k","push","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","filter","destroyGems","_i3","_cols2","matches","check3orMore","data-testid","map","key","assign","getRow","colors","App","gameRef","selectedColor","setSelectedColor","selectedCol","setSelectedCol","Row","Col","md","role","aria-label","span","offset","components_Game_Game","Form","Group","Label","Control","as","onChange","e","currentTarget","value","Button","variant","onClick","parseInt","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ebcc9ab2.chunk.js","sourcesContent":["import classnames from \"classnames\";\nimport React, { forwardRef, useImperativeHandle, useState } from \"react\";\nimport { useInterval } from \"../../effects\";\nimport \"./Game.css\";\n\n// as in some other rather similar game\nexport const ROW_COUNT = 13;\nexport const COL_COUNT = 6;\n\nconst REFRESH_TIME_MILLIS = 500;\nconst SPEED_UP_TIME_MILLIS = 40;\n\n// only used to keep track of indices, never filled with anything else\nconst rows = Array.from(Array(ROW_COUNT), (_, i) => i);\nexport const cols = Array.from(Array(COL_COUNT), (_, i) => i);\n\ntype CellProps = {\n  row: number;\n  col: number;\n  moving?: boolean;\n  color?: string;\n  owner?: string;\n  blinking?: boolean;\n};\n\ntype Cells = { [cellId: string]: CellProps };\n\nconst cellId = (row: number, col: number) => `${row}-${col}`;\n\n// only used for initialization, then we'll use the hook\nconst cellsProps: Cells = {};\n\nfor (const r of rows) {\n  for (const c of cols) {\n    cellsProps[cellId(r, c)] = { row: r, col: c };\n  }\n}\n\n// used to quickly setup a scenario when debugging\nconst setCell = (row: number, col: number, color: string) => {\n  cellsProps[`${row}-${col}`] = { row, col, color };\n};\n\nconst Cell = React.memo((props: CellProps) => (\n  <span\n    className={classnames(\"Cell\", {\n      [`bg-${props.color}`]: props.color !== undefined,\n      blinking: props.blinking,\n    })}\n  >\n    &nbsp;\n  </span>\n));\n\nexport type GameRef = {\n  addGem: (newGem: CellProps) => any;\n};\n\nexport type GameProps = {\n  initialScenario?: CellProps[];\n};\n\nenum NeighbourDirection {\n  E,\n  NE,\n  N,\n  NW,\n}\n\nconst neighbourKey: { [dir in NeighbourDirection]: (c: CellProps) => string } = {\n  [NeighbourDirection.E]: (c) => cellId(c.row, c.col + 1),\n  [NeighbourDirection.NE]: (c) => cellId(c.row - 1, c.col + 1),\n  [NeighbourDirection.N]: (c) => cellId(c.row - 1, c.col),\n  [NeighbourDirection.NW]: (c) => cellId(c.row - 1, c.col - 1),\n};\n\nexport const Game = (props: GameProps, ref: React.Ref<any>) => {\n  if (props.initialScenario) {\n    props.initialScenario.forEach((p) => setCell(p.row, p.col, p.color!));\n  }\n  const [cells, setCells] = useState(cellsProps);\n  const [speedGravityUp, setSpeedGravityUp] = useState(false);\n\n  useImperativeHandle(ref, () => ({\n    addGem(newGem: CellProps) {\n      setCells({ ...cells, [cellId(newGem.row, newGem.col)]: newGem });\n    },\n  }));\n\n  const resetMoving = () =>\n    Object.values(cells).forEach((c) => {\n      c.moving = false;\n    });\n\n  const destroyGems = () => {\n    const blinking = Object.values(cells).filter((c) => c.blinking);\n\n    if (blinking) {\n      blinking.forEach((c) => {\n        c.blinking = false;\n        c.color = undefined;\n      });\n    }\n\n    return blinking.length;\n  };\n\n  const gravityStep = () => {\n    for (let r = ROW_COUNT - 1; r >= 0; r--) {\n      for (const c of cols) {\n        const cell = cells[cellId(r, c)];\n        const { row, col, color } = cell;\n        const cellBelow = cells[cellId(row + 1, col)];\n        if (color && cellBelow && !cellBelow.color) {\n          cell.color = undefined;\n          cellBelow.color = color;\n          cellBelow.moving = true;\n        }\n      }\n    }\n  };\n\n  const checkConnected = (\n    cell: CellProps,\n    othersInPath: CellProps[],\n    allPaths: CellProps[][],\n    dir?: NeighbourDirection\n  ) => {\n    const { color } = cell;\n    if (cell.moving) {\n      // wait for next round\n      return;\n    }\n\n    const updatedPath = [...othersInPath, cell];\n\n    const checkDirections =\n      dir !== undefined\n        ? [dir]\n        : [\n            NeighbourDirection.E,\n            NeighbourDirection.NE,\n            NeighbourDirection.N,\n            NeighbourDirection.NW,\n          ];\n\n    checkDirections.forEach((d) => {\n      const k = neighbourKey[d](cell);\n      const c = cells[k];\n      if (c && !c.moving && c.color === color) {\n        checkConnected(c, [...updatedPath], allPaths, d);\n      } else if (updatedPath.length >= 3) {\n        allPaths.push([...updatedPath]);\n      }\n    });\n  };\n\n  const check3orMore = () => {\n    const allPaths: CellProps[][] = [];\n\n    for (let r = ROW_COUNT - 1; r >= 0; r--) {\n      for (const c of cols) {\n        const cell = cells[cellId(r, c)];\n        if (cell && cell.color) {\n          checkConnected(cell, [], allPaths);\n        }\n      }\n    }\n\n    const matches = allPaths.filter((p) => p.length >= 3);\n\n    if (matches.length) {\n      // tslint:disable-next-line:no-console\n      matches.forEach((p) =>\n        p.forEach((c) => {\n          c.blinking = true;\n        })\n      );\n    }\n  };\n\n  useInterval(\n    () => {\n      if (speedGravityUp) {\n        gravityStep();\n        if (!Object.values(cells).filter((c) => c.moving).length) {\n          setSpeedGravityUp(false);\n        }\n        resetMoving();\n        setCells({ ...cells });\n      } else {\n        if (destroyGems()) {\n          setSpeedGravityUp(true);\n        } else {\n          gravityStep();\n          check3orMore();\n          resetMoving();\n          setCells({ ...cells });\n        }\n      }\n    },\n    speedGravityUp ? SPEED_UP_TIME_MILLIS : REFRESH_TIME_MILLIS\n  );\n\n  const getRow = (r: number) => (\n    <div key={`row-${r}`} className=\"Row\">\n      {cols.map((_, c) => (\n        <Cell key={cellId(r, c)} {...cells[cellId(r, c)]} />\n      ))}\n    </div>\n  );\n\n  return (\n    <div className=\"Game\" data-testid=\"Game\">\n      {rows.map((_, r) => getRow(r))}\n    </div>\n  );\n};\n\nexport default forwardRef<GameRef, GameProps>(Game);\n","import { useEffect, useRef } from \"react\";\n\ntype Callback = () => any;\n\n// from https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nexport const useInterval = (callback: Callback, delay: number) => {\n  const savedCallback = useRef<Callback>();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current!();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n};\n","import React, { useRef, useState } from \"react\";\nimport { Button, Col, Form, FormControlProps, Row } from \"react-bootstrap\";\nimport Game, { cols, GameProps, GameRef } from \"../Game/Game\";\nimport \"./App.css\";\n\nconst colors = [\"blue\", \"green\", \"deepblue\", \"orange\", \"purple\", \"yellow\"];\n\n// we're using GameProps here because of testing: passing the ref to <Game>\n// is no easy task (we'd need to mock useRef() somehow), so for now keep it\n// this way. Props are only used while testing <Game>.\nconst App = (props: GameProps) => {\n  const gameRef = useRef<GameRef>({ addGem: () => null });\n\n  const [selectedColor, setSelectedColor] = useState(colors[0]);\n  const [selectedCol, setSelectedCol] = useState(\"0\");\n\n  const onColorChange = (e: React.FormEvent<FormControlProps>) =>\n    setSelectedColor(e.currentTarget.value as string);\n\n  const onSelectionChange = (e: React.FormEvent<FormControlProps>) =>\n    setSelectedCol(e.currentTarget.value as string);\n\n  const addGem = () =>\n    gameRef.current!.addGem({\n      col: parseInt(selectedCol, 10),\n      color: selectedColor,\n      moving: true,\n      row: 0,\n    });\n\n  return (\n    <div className=\"App\">\n      <Row className=\"App-header\">\n        <Col md={12}>\n          Gemchain{\" \"}\n          <span role=\"img\" aria-label=\"gem emoji\">\n            💎\n          </span>\n        </Col>\n      </Row>\n      <Row>\n        <Col md={{ span: 6, offset: 3 }} className=\"GameContainer\">\n          <Game ref={gameRef} initialScenario={props.initialScenario} />\n        </Col>\n        <Col md={2}>\n          <Form>\n            <Form.Group>\n              <Form.Label>Gem color</Form.Label>\n              <Form.Control as=\"select\" onChange={onColorChange} value={selectedColor}>\n                {colors.map((color) => (\n                  <option key={`opt-${color}`}>{color}</option>\n                ))}\n              </Form.Control>\n            </Form.Group>\n            <Form.Group>\n              <Form.Label>Add gem to column</Form.Label>\n              <Form.Control as=\"select\" onChange={onSelectionChange} value={selectedCol}>\n                {cols.map((_, i) => (\n                  <option key={`opt-${i}`}>{i}</option>\n                ))}\n              </Form.Control>\n            </Form.Group>\n            <Button variant=\"secondary\" onClick={addGem}>\n              Add\n            </Button>\n          </Form>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App/App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}